import { Model } from 'mongoose';
import { Game, GameDocument } from './game.schema';
import { UserDocument } from '../users/user.schema';
import { CreateGameDto } from './dto/create-game-dto';
import { GameGateway } from './game.gateway';
import { CardDocument, ColumnDocument } from './card/card.schema';
import { UsersService } from 'src/users/users.service';
import { AiService } from './game.ai';
export declare class GameService {
    private readonly gameModel;
    private readonly userModel;
    private readonly cardModel;
    private readonly columnModel;
    private readonly gameGateway;
    private readonly usersService;
    private readonly aiService;
    constructor(gameModel: Model<GameDocument>, userModel: Model<UserDocument>, cardModel: Model<CardDocument>, columnModel: Model<ColumnDocument>, gameGateway: GameGateway, usersService: UsersService, aiService: AiService);
    createGame(createGameDto: CreateGameDto): Promise<Game>;
    findGameByName(gameName: string): Promise<Game>;
    findGameByUser(owner: string): Promise<Game | null>;
    getAvailableGames(page?: number, pageSize?: number): Promise<{
        games: Game[];
        total: number;
    }>;
    getPreparationTimeRemaining(gameName: string): Promise<number>;
    joinGame(gameName: string, username: string): Promise<Game | null>;
    leaveGame(gameName: string, username: string): Promise<void>;
    prepareGame(gameName: string, level: string): Promise<GameDocument>;
    private assignSummaryCards;
    revealCard(gameName: string, playerName: string, columnIndex: number): Promise<GameDocument>;
    takeColumn(gameName: string, playerName: string, columnIndex: number): Promise<GameDocument>;
    private adjustAiDifficulty;
    selectDifficultyAndPrepareGame(gameName: string, level: 'BÃ¡sico' | 'Experto'): Promise<GameDocument>;
    private createDeck;
    private setupColumnsAndDeck;
    private assignHelpCardsAndChameleons;
    private getUniqueChameleonColor;
    private getUniqueChameleonColors;
    private shuffleArray;
    private chooseStartingPlayer;
    getCurrentGame(gameName: string): Promise<GameDocument>;
    nextTurn(gameName: string): Promise<void>;
    private scheduleGamePreparation;
    private updatePreparationTime;
    finalizeAndCalculateScores(gameName: string): Promise<GameDocument>;
    private selectPositiveColors;
    private calculateScore;
}
